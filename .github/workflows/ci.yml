name: Rust Build and Release

on:
  workflow_dispatch:
    inputs:
      build_release:
        description: 'Build release versions'
        required: true
        default: false
        type: boolean
      create_release:
        description: 'Create GitHub release'
        required: true
        default: false
        type: boolean
      prerelease:
        description: 'Mark the release as prerelease'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: serial-multiplexer

jobs:
  test-linux:
    uses: ./.github/workflows/tests-linux-x86_64.yml

  test-windows:
    uses: ./.github/workflows/tests-windows.yml

  build-linux:
    name: "Build Linux version"
    needs: [test-linux]
    if: github.event.inputs.build_release == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - variant: "standard"
            rustflags: "-Ctarget-cpu=x86-64"
            suffix: "-x86-64"
          - variant: "optimized"
            rustflags: "-Ctarget-cpu=x86-64-v3"
            suffix: "-x86-64-v3"
    steps:
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ matrix.variant }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.variant }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-${{ matrix.variant }}-
            ${{ runner.os }}-cargo-
      - uses: actions/checkout@v4
      - name: Update rust
        run: rustup update
      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep -m1 'version = ' Cargo.toml | cut -d '"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Build in release mode
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
        run: cargo build --release
      - name: Strip binary
        run: strip target/release/${{ env.BINARY_NAME }}
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-linux-${{ env.VERSION }}${{ matrix.suffix }}
          path: target/release/${{ env.BINARY_NAME }}
          if-no-files-found: error

  build-windows:
    name: "Build Windows version"
    needs: [test-windows]
    if: github.event.inputs.build_release == 'true'
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - variant: "standard"
            rustflags: "-Ctarget-cpu=x86-64"
            suffix: "-x86-64"
          - variant: "optimized"
            rustflags: "-Ctarget-cpu=x86-64-v3"
            suffix: "-x86-64-v3"
    steps:
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ matrix.variant }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.variant }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-${{ matrix.variant }}-
            ${{ runner.os }}-cargo-
      - uses: actions/checkout@v4
      - name: Update rust
        run: rustup update
      - name: Extract version from Cargo.toml
        id: version
        shell: bash
        run: |
          VERSION=$(grep -m1 'version = ' Cargo.toml | cut -d '"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Build in release mode
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
        run: cargo build --release
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-windows-${{ env.VERSION }}${{ matrix.suffix }}
          path: target/release/${{ env.BINARY_NAME }}.exe
          if-no-files-found: error

  create-release:
    name: "Create Release"
    needs: [build-linux, build-windows]
    if: github.event.inputs.build_release == 'true' && github.event.inputs.create_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep -m1 'version = ' Cargo.toml | cut -d '"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Download Linux standard artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-linux-x86-64-${{ env.VERSION }}
          path: ./linux-standard/
      - name: Download Linux optimized artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-linux-x86-64-v3-${{ env.VERSION }}
          path: ./linux-optimized/
      - name: Download Windows standard artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-windows-x86-64-${{ env.VERSION }}
          path: ./windows-standard/
      - name: Download Windows optimized artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-windows-x86-64-v3-${{ env.VERSION }}
          path: ./windows-optimized/
      - name: Rename artifacts with version
        run: |
          mv linux-standard/${{ env.BINARY_NAME }} ${{ env.BINARY_NAME }}-${{ env.VERSION }}-linux-x86-64
          mv linux-optimized/${{ env.BINARY_NAME }} ${{ env.BINARY_NAME }}-${{ env.VERSION }}-linux-x86-64-v3
          mv windows-standard/${{ env.BINARY_NAME }}.exe ${{ env.BINARY_NAME }}-${{ env.VERSION }}-windows-x86-64.exe
          mv windows-optimized/${{ env.BINARY_NAME }}.exe ${{ env.BINARY_NAME }}-${{ env.VERSION }}-windows-x86-64-v3.exe
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.BINARY_NAME }}-${{ env.VERSION }}-linux-x86-64
            ${{ env.BINARY_NAME }}-${{ env.VERSION }}-linux-x86-64-v3
            ${{ env.BINARY_NAME }}-${{ env.VERSION }}-windows-x86-64.exe
            ${{ env.BINARY_NAME }}-${{ env.VERSION }}-windows-x86-64-v3.exe
          name: Release v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: true
          fail_on_unmatched_files: true
