name: Rust Build and Release

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: serial-multiplexer

jobs:
  test-linux:
    name: "Tests on Linux"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run tests
        run: cargo test --all

  test-windows:
    name: "Tests on Windows"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run tests
        run: cargo test --all

  build-linux:
    name: "Build Linux version"
    needs: [test-linux]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep -m1 'version = ' Cargo.toml | cut -d '"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Build in release mode
        run: cargo build --release
      - name: Strip binary
        run: strip target/release/${{ env.BINARY_NAME }}
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-linux-${{ env.VERSION }}
          path: target/release/${{ env.BINARY_NAME }}
          if-no-files-found: error

  build-windows:
    name: "Build Windows version"
    needs: [test-windows]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - name: Extract version from Cargo.toml
        id: version
        shell: bash
        run: |
          VERSION=$(grep -m1 'version = ' Cargo.toml | cut -d '"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Build in release mode
        run: cargo build --release
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-windows-${{ env.VERSION }}
          path: target/release/${{ env.BINARY_NAME }}.exe
          if-no-files-found: error

  create-release:
    name: "Create Release"
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep -m1 'version = ' Cargo.toml | cut -d '"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-linux-${{ env.VERSION }}
          path: ./
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-windows-${{ env.VERSION }}
          path: ./
      - name: Rename artifacts with version
        run: |
          mv ${{ env.BINARY_NAME }} ${{ env.BINARY_NAME }}-${{ env.VERSION }}-linux
          mv ${{ env.BINARY_NAME }}.exe ${{ env.BINARY_NAME }}-${{ env.VERSION }}-windows.exe
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.BINARY_NAME }}-${{ env.VERSION }}-linux
            ${{ env.BINARY_NAME }}-${{ env.VERSION }}-windows.exe
          name: Release v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true