// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod serial_proxy {

  use core::cmp::Ordering;
  use core::mem;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

  #[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
  )]
  pub const ENUM_MIN_CONTROL_CODE: u8 = 0;
  #[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
  )]
  pub const ENUM_MAX_CONTROL_CODE: u8 = 4;
  #[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
  )]
  #[allow(non_camel_case_types)]
  pub const ENUM_VALUES_CONTROL_CODE: [ControlCode; 5] = [
    ControlCode::Ack,
    ControlCode::Close,
    ControlCode::Command,
    ControlCode::Data,
    ControlCode::Initial,
  ];

  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
  #[repr(transparent)]
  pub struct ControlCode(pub u8);
  #[allow(non_upper_case_globals)]
  impl ControlCode {
    pub const Ack: Self = Self(0);
    pub const Close: Self = Self(1);
    pub const Command: Self = Self(2);
    pub const Data: Self = Self(3);
    pub const Initial: Self = Self(4);

    pub const ENUM_MIN: u8 = 0;
    pub const ENUM_MAX: u8 = 4;
    pub const ENUM_VALUES: &'static [Self] = &[
      Self::Ack,
      Self::Close,
      Self::Command,
      Self::Data,
      Self::Initial,
    ];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
      match self {
        Self::Ack => Some("Ack"),
        Self::Close => Some("Close"),
        Self::Command => Some("Command"),
        Self::Data => Some("Data"),
        Self::Initial => Some("Initial"),
        _ => None,
      }
    }
  }
  impl core::fmt::Debug for ControlCode {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
      if let Some(name) = self.variant_name() {
        f.write_str(name)
      } else {
        f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
      }
    }
  }
  impl<'a> flatbuffers::Follow<'a> for ControlCode {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
      let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
      Self(b)
    }
  }

  impl flatbuffers::Push for ControlCode {
    type Output = ControlCode;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
      flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
  }

  impl flatbuffers::EndianScalar for ControlCode {
    type Scalar = u8;
    #[inline]
    fn to_little_endian(self) -> u8 {
      self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: u8) -> Self {
      let b = u8::from_le(v);
      Self(b)
    }
  }

  impl<'a> flatbuffers::Verifiable for ControlCode {
    #[inline]
    fn run_verifier(
      v: &mut flatbuffers::Verifier,
      pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
      use self::flatbuffers::Verifiable;
      u8::run_verifier(v, pos)
    }
  }

  impl flatbuffers::SimpleToVerifyInSlice for ControlCode {}
  pub enum DatagramOffset {}
  #[derive(Copy, Clone, PartialEq)]

  pub struct Datagram<'a> {
    pub _tab: flatbuffers::Table<'a>,
  }

  impl<'a> flatbuffers::Follow<'a> for Datagram<'a> {
    type Inner = Datagram<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
      Self {
        _tab: flatbuffers::Table::new(buf, loc),
      }
    }
  }

  impl<'a> Datagram<'a> {
    pub const VT_IDENTIFIER: flatbuffers::VOffsetT = 4;
    pub const VT_CODE: flatbuffers::VOffsetT = 6;
    pub const VT_DATA: flatbuffers::VOffsetT = 8;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
      Datagram { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
      _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
      args: &'args DatagramArgs<'args>,
    ) -> flatbuffers::WIPOffset<Datagram<'bldr>> {
      let mut builder = DatagramBuilder::new(_fbb);
      builder.add_identifier(args.identifier);
      if let Some(x) = args.data {
        builder.add_data(x);
      }
      builder.add_code(args.code);
      builder.finish()
    }

    #[inline]
    pub fn identifier(&self) -> u64 {
      // Safety:
      // Created from valid Table for this object
      // which contains a valid value in this slot
      unsafe {
        self
          ._tab
          .get::<u64>(Datagram::VT_IDENTIFIER, Some(0))
          .unwrap()
      }
    }
    #[inline]
    pub fn code(&self) -> ControlCode {
      // Safety:
      // Created from valid Table for this object
      // which contains a valid value in this slot
      unsafe {
        self
          ._tab
          .get::<ControlCode>(Datagram::VT_CODE, Some(ControlCode::Ack))
          .unwrap()
      }
    }
    #[inline]
    pub fn data(&self) -> Option<flatbuffers::Vector<'a, u8>> {
      // Safety:
      // Created from valid Table for this object
      // which contains a valid value in this slot
      unsafe {
        self
          ._tab
          .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Datagram::VT_DATA, None)
      }
    }
  }

  impl flatbuffers::Verifiable for Datagram<'_> {
    #[inline]
    fn run_verifier(
      v: &mut flatbuffers::Verifier,
      pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
      use self::flatbuffers::Verifiable;
      v.visit_table(pos)?
        .visit_field::<u64>("identifier", Self::VT_IDENTIFIER, false)?
        .visit_field::<ControlCode>("code", Self::VT_CODE, false)?
        .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
          "data",
          Self::VT_DATA,
          false,
        )?
        .finish();
      Ok(())
    }
  }
  pub struct DatagramArgs<'a> {
    pub identifier: u64,
    pub code: ControlCode,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
  }
  impl<'a> Default for DatagramArgs<'a> {
    #[inline]
    fn default() -> Self {
      DatagramArgs {
        identifier: 0,
        code: ControlCode::Ack,
        data: None,
      }
    }
  }

  pub struct DatagramBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
  }
  impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DatagramBuilder<'a, 'b, A> {
    #[inline]
    pub fn add_identifier(&mut self, identifier: u64) {
      self
        .fbb_
        .push_slot::<u64>(Datagram::VT_IDENTIFIER, identifier, 0);
    }
    #[inline]
    pub fn add_code(&mut self, code: ControlCode) {
      self
        .fbb_
        .push_slot::<ControlCode>(Datagram::VT_CODE, code, ControlCode::Ack);
    }
    #[inline]
    pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
      self
        .fbb_
        .push_slot_always::<flatbuffers::WIPOffset<_>>(Datagram::VT_DATA, data);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DatagramBuilder<'a, 'b, A> {
      let start = _fbb.start_table();
      DatagramBuilder {
        fbb_: _fbb,
        start_: start,
      }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<Datagram<'a>> {
      let o = self.fbb_.end_table(self.start_);
      flatbuffers::WIPOffset::new(o.value())
    }
  }

  impl core::fmt::Debug for Datagram<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
      let mut ds = f.debug_struct("Datagram");
      ds.field("identifier", &self.identifier());
      ds.field("code", &self.code());
      ds.field("data", &self.data());
      ds.finish()
    }
  }
  #[inline]
  /// Verifies that a buffer of bytes contains a `Datagram`
  /// and returns it.
  /// Note that verification is still experimental and may not
  /// catch every error, or be maximally performant. For the
  /// previous, unchecked, behavior use
  /// `root_as_datagram_unchecked`.
  pub fn root_as_datagram(buf: &[u8]) -> Result<Datagram, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<Datagram>(buf)
  }
  #[inline]
  /// Verifies that a buffer of bytes contains a size prefixed
  /// `Datagram` and returns it.
  /// Note that verification is still experimental and may not
  /// catch every error, or be maximally performant. For the
  /// previous, unchecked, behavior use
  /// `size_prefixed_root_as_datagram_unchecked`.
  pub fn size_prefixed_root_as_datagram(
    buf: &[u8],
  ) -> Result<Datagram, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<Datagram>(buf)
  }
  #[inline]
  /// Verifies, with the given options, that a buffer of bytes
  /// contains a `Datagram` and returns it.
  /// Note that verification is still experimental and may not
  /// catch every error, or be maximally performant. For the
  /// previous, unchecked, behavior use
  /// `root_as_datagram_unchecked`.
  pub fn root_as_datagram_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
  ) -> Result<Datagram<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<Datagram<'b>>(opts, buf)
  }
  #[inline]
  /// Verifies, with the given verifier options, that a buffer of
  /// bytes contains a size prefixed `Datagram` and returns
  /// it. Note that verification is still experimental and may not
  /// catch every error, or be maximally performant. For the
  /// previous, unchecked, behavior use
  /// `root_as_datagram_unchecked`.
  pub fn size_prefixed_root_as_datagram_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
  ) -> Result<Datagram<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<Datagram<'b>>(opts, buf)
  }
  #[inline]
  /// Assumes, without verification, that a buffer of bytes contains a Datagram and returns it.
  /// # Safety
  /// Callers must trust the given bytes do indeed contain a valid `Datagram`.
  pub unsafe fn root_as_datagram_unchecked(buf: &[u8]) -> Datagram {
    flatbuffers::root_unchecked::<Datagram>(buf)
  }
  #[inline]
  /// Assumes, without verification, that a buffer of bytes contains a size prefixed Datagram and returns it.
  /// # Safety
  /// Callers must trust the given bytes do indeed contain a valid size prefixed `Datagram`.
  pub unsafe fn size_prefixed_root_as_datagram_unchecked(buf: &[u8]) -> Datagram {
    flatbuffers::size_prefixed_root_unchecked::<Datagram>(buf)
  }
  #[inline]
  pub fn finish_datagram_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Datagram<'a>>,
  ) {
    fbb.finish(root, None);
  }

  #[inline]
  pub fn finish_size_prefixed_datagram_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Datagram<'a>>,
  ) {
    fbb.finish_size_prefixed(root, None);
  }
} // pub mod serial_proxy
